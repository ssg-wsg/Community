# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License").
# You may not use this file except in compliance with the License.
# A copy of the License is located at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# or in the "license" file accompanying this file. This file is distributed
# on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language governing
# permissions and limitations under the License.

AWSTemplateFormatVersion: "2010-09-09"
Description: >
  This template creates an IAM role for Apps applications.
Parameters:
  RepositoryName:
    Description: CodeComit repository name for APPS code
    Type: String
    Default: amb-fabric-apps
  AMBAppsRegion:
    Type: String
    Description: The region where apps are deployed
  AMBAppsSAMRoleName:
    Type: String
    Description: Name of the IAM role for Apps SAM application
  AMBAppsCloudWatchEventRoleName:
    Description: Name of an IAM role for AMB Apps CloudWatchEvent
    Type: String
  AMBAppsCodeBuildRoleName:
    Description: Name of an IAM role for AMB Apps CodeBuild
    Type: String
  AMBAppsSyncTaskRoleName:
    Description: Name of an IAM role for AMB Apps Synchronizer ECS Task
    Type: String
  AMBAppsSyncTaskExecRoleName:
    Description: Name of an IAM role for AMB Apps Synchronizer ECS Task Execution Role
    Type: String
  AMBSyncDynamoTableName:
    Type: String
    Description: >
      A name of a DynamoDB table that will hold the synchronized write set.
    Default: amb-blockchainWriteSet
  AMBAppsECSClusterName:
    Type: String
    Description: >
      A name of an ECS cluster for Fargate containers.
    Default: amb-apps-ecs
  AMBAppsSQSInQueueName:
    Description: A name of an Inbound SQS queue
    Type: String
  AMBAppsSNSProcessingErrorTopicName:
    Type: String
    Description: A name of an dead letter SQS queue
  BoundaryPolicyARN:
    Description: An ARN of a boundary policy, if exists
    Type: String
  StackPrefix:
    Description: A prefix for all CloudFormation stacks in Apps
    Type: String
  LambdaPrefix:
    Description: A prefix for all Lambda functions in Apps
    Type: String
  RolesPrefix:
    Description: A prefix for all IAM roles in Apps
    Type: String
  PoliciesPrefix:
    Description: A prefix for all IAM policies in Apps
    Type: String
  ChannelS3BucketPrefix:
    Description: A prefix for all channel S3 buckets in Apps
    Type: String
  SyncDynamoDBNamePrefix:
    Description: A prefix for all DynamoDB tables used by The Synchronizer
    Type: String
  AMBAppsBuildBucketPrefix:
    Description: A prefix for S3 buckets in Apps
    Type: String
  AMBAppsCodeBuildProjectNamePrefix:
    Description: A prefix for CodeBuild projects in Apps
    Type: String
Conditions:
  BoundaryPolicyARNExists:
    Fn::Not:
      - Fn::Equals:
          - ""
          - !Ref BoundaryPolicyARN
Resources:
  AMBAppsSAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref AMBAppsSAMRoleName
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      PermissionsBoundary:
        Fn::If:
          - BoundaryPolicyARNExists
          - !Ref BoundaryPolicyARN
          - !Ref "AWS::NoValue"
      Tags:
        - Key: AMBApps
          Value: AMBAppsRole
      Policies:
        - PolicyName: !Sub "${PoliciesPrefix}-SecretsManagerReadAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: VisualEditor0
                Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                  - secretsmanager:ListSecretVersionIds
                Resource: "*"
        - PolicyName: !Sub "${PoliciesPrefix}-CloudWatchAndLogs"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - managedblockchain:ListNodes
                  - managedblockchain:ListMembers
                  - cloudwatch:PutMetricData
                  - cloudwatch:PutMetricAlarm
                  - cloudwatch:DescribeAlarms
                  - cloudformation:describeStacks
                Resource: "*"
              - Effect: Allow #allow to write logs to cloudwatch
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
        - PolicyName: !Sub "${PoliciesPrefix}-ManagedBlockchainManager"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: VisualEditor0
                Effect: Allow
                Action:
                  - managedblockchain:GetNetwork
                  - managedblockchain:ListMembers
                  - managedblockchain:ListNetworks
                  - managedblockchain:GetNode
                  - managedblockchain:GetMember
                  - managedblockchain:ListNodes
                Resource: "*"
        - PolicyName: !Sub "${PoliciesPrefix}-ParameterStoreReadAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: VisualEditor0
                Effect: Allow
                Action:
                  - ssm:GetParameterHistory
                  - ssm:GetParametersByPath
                  - ssm:GetParameters
                  - ssm:GetParameter
                Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/amb*"
              - Sid: VisualEditor1
                Effect: Allow
                Action: ssm:DescribeParameters
                Resource: "*"
        - PolicyName: !Sub "${PoliciesPrefix}-LambdaQuery"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: VisualEditor0
                Effect: Allow
                Action:
                  - lambda:ListFunctions
                  - lambda:GetFunction
                  - lambda:GetFunctionConfiguration
                Resource: "*"
        - PolicyName: !Sub "${PoliciesPrefix}-LambdaInvoke"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: VisualEditor0
                Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !Sub "arn:aws:lambda:${AMBAppsRegion}:${AWS::AccountId}:function:${LambdaPrefix}*"
        - PolicyName: !Sub "${PoliciesPrefix}-LambdaVPCAccessInstantiationRole"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: VisualEditor0
                Effect: Allow
                Action:
                  - ec2:DescribeSubnets
                  - ec2:DescribeSecurityGroups
                Resource: "*"
        - PolicyName: !Sub "${PoliciesPrefix}-S3ReadAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - s3:GetObject
                Effect: Allow
                Resource: arn:aws:s3:::*/*
        - PolicyName: !Sub "${PoliciesPrefix}-DynamoDBStreamAccessRole"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow #allow lambda to read from the event stream
                Action:
                  - dynamodb:DescribeStream
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:ListStreams
                  - dynamodb:GetItem
                Resource: "*"
        - PolicyName: !Sub "${PoliciesPrefix}-AllowSqs"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:GetQueueAttributes
                  - sqs:ChangeMessageVisibility
                Resource:
                  - !Sub "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${AMBAppsSQSInQueueName}-dlq"
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:ChangeMessageVisibility
                Resource: !Sub arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${AMBAppsSQSInQueueName}
        - PolicyName: AMBLambdaAllowSns
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                  - sns:ListTopics
                  - sns:ListSubscriptionsByTopic
                  - sns:GetTopicAttributes
                Resource:
                  - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${AMBAppsSNSProcessingErrorTopicName}
 

  AMBAppsCodeBuildRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Ref AMBAppsCodeBuildRoleName
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: /service-role/
      PermissionsBoundary:
        Fn::If:
          - BoundaryPolicyARNExists
          - !Ref BoundaryPolicyARN
          - !Ref "AWS::NoValue"
      Policies:
        - PolicyName: !Sub "${PoliciesPrefix}-BuildPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "cloudformation:Get*"
                  - "cloudformation:Describe*"
                  - "cloudformation:List*"
                  - "cloudformation:CreateChangeSet"
                  - "cloudformation:ExecuteChangeSet"
                Resource:
                  - !Sub "arn:aws:cloudformation:${AMBAppsRegion}:${AWS::AccountId}:stack/${StackPrefix}*"
              - Effect: "Allow"
                Action:
                  - "codecommit:ListBranches"
                  - "codecommit:ListRepositories"
                  - "codecommit:BatchGetRepositories"
                  - "codecommit:Get*"
                  - "codecommit:GitPull"
                Resource:
                  #- !Sub "arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${RepositoryName}"
                  - "*"
              - Effect: "Allow"
                Action:
                  - "ec2:Describe*"
                  - "ec2:CreateVpc*"
                  - "ec2:AssociateVpc*"
                  - "ec2:ModifyVpc*"
                  - "ec2:CreateSubnet"
                  - "ec2:ModifySubnetAttribute"
                  - "ec2:AssociateSubnetCidrBlock"
                  - "ec2:CreateFlowLogs"
                  - "ec2:CreateNetwork*"
                  - "ec2:CreateSecurityGroup*"
                  - "ec2:AuthorizeSecurityGroup*"
                  - "ec2:UpdateSecurityGroupRuleDescriptions*"
                  - "ec2:CreateRouteTable*"
                  - "ec2:AssociateRouteTable*"
                  - "ec2:ReplaceRouteTable*"
                  - "ec2:CreateVpcEndpoint*"
                  - "ec2:CreateTags"
                  - "ec2:DeleteVpc*"
                  - "ec2:DisassociateVpc*"
                  - "ec2:DeleteSubnet"
                  - "ec2:DisassociateSubnetCidrBlock"
                  - "ec2:DeleteSecurityGroup*"
                  - "ec2:RevokeSecurityGroup*"
                  - "ec2:DeleteRouteTable*"
                  - "ec2:DisassociateRouteTable"
                  - "ec2:DeleteVpcEndpoint*"
                  - "ec2:CreateInternetGateway"
                  - "ec2:AttachInternetGateway"
                  - "ec2:DeleteInternetGateway"
                  - "ec2:DescribeInternetGateways"
                  - "ec2:DetachInternetGateway"
                  - "ec2:CreateNatGateway"
                  - "ec2:DeleteNatGateway"
                  - "ec2:DescribeNatGateways"
                  - "ec2:CreateRoute"
                  - "ec2:allocateAddress"
                  - "cloudformation:ValidateTemplate"
                  - "elasticloadbalancing:Describe*"
                  - "autoscaling:Describe*"
                  - "logs:Describe*"
                  - "logs:Get*"
                  - "tag:Get*"
                Resource:
                  - "*"
              - Effect: "Allow"
                Action:
                  - iam:GetRole
                  - iam:PassRole
                  - iam:DetachRolePolicy
                  - iam:DeleteRolePolicy
                  - iam:UpdateRoleDescription
                  - iam:CreateRole
                  - iam:DeleteRole
                  - iam:AttachRolePolicy
                  - iam:UpdateRole
                  - iam:PutRolePolicy
                  - iam:GetRolePolicy
                Resource:
                  - !Sub "arn:aws:iam::${AWS::AccountId}:role/${RolesPrefix}*"
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*"
              - Effect: "Allow"
                Action:
                  - "cloudformation:CreateChangeSet"
                Resource: !Sub "arn:aws:cloudformation:${AMBAppsRegion}:aws:transform/Serverless-2016-10-31"
              - Effect: "Allow"
                Action:
                  - "lambda:CreateFunction"
                  - "lambda:AddPermission"
                  - "lambda:TagResource"
                  - "lambda:ListVersionsByFunction"
                  - "lambda:GetLayerVersion"
                  - "lambda:PublishLayerVersion"
                  - "lambda:InvokeAsync"
                  - "lambda:GetAccountSettings"
                  - "lambda:GetFunctionConfiguration"
                  - "lambda:CreateEventSourceMapping"
                  - "lambda:GetLayerVersionPolicy"
                  - "lambda:UntagResource"
                  - "lambda:PutFunctionConcurrency"
                  - "lambda:GetFunctionConcurrency"
                  - "lambda:DeleteFunctionConcurrency"
                  - "lambda:RegisterScalableTarget"
                  - "lambda:PutScalingPolicy"
                  - "lambda:ListTags"
                  - "lambda:DeleteLayerVersion"
                  - "lambda:ListLayerVersions"
                  - "lambda:ListLayers"
                  - "lambda:DeleteFunction"
                  - "lambda:GetAlias"
                  - "lambda:UpdateEventSourceMapping"
                  - "lambda:ListFunctions"
                  - "lambda:GetEventSourceMapping"
                  - "lambda:InvokeFunction"
                  - "lambda:GetFunction"
                  - "lambda:ListAliases"
                  - "lambda:UpdateFunctionConfiguration"
                  - "lambda:UpdateAlias"
                  - "lambda:UpdateFunctionCode"
                  - "lambda:ListEventSourceMappings"
                  - "lambda:DeleteAlias"
                  - "lambda:PublishVersion"
                  - "lambda:DeleteFunctionConcurrency"
                  - "lambda:DeleteEventSourceMapping"
                  - "lambda:GetPolicy"
                  - "lambda:CreateAlias"
                Resource:
                  - !Sub "arn:aws:lambda:${AMBAppsRegion}:${AWS::AccountId}:function:${LambdaPrefix}*"
                  - !Sub "arn:aws:lambda:${AMBAppsRegion}:${AWS::AccountId}:layer:${LambdaPrefix}*"
              - Effect: Allow
                Action:
                  - "lambda:DeleteEventSourceMapping"
                  - "lambda:UpdateEventSourceMapping"
                  - "lambda:CreateEventSourceMapping"
                  - "lambda:ListEventSourceMappings"
                  - "lambda:GetEventSourceMapping"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:ListBucket"
                  - "s3:ListMultipartUploadParts"
                  - "s3:ListBucketMultipartUploads"
                  - "s3:AbortMultipartUpload"
                  - "s3:Create*"
                  - "s3:Delete*"
                  - "s3:Add*"
                  - "s3:Attach*"
                  - "s3:Put*"
                Resource:
                  - !Sub "arn:aws:s3:::${AMBAppsBuildBucketPrefix}*"
                  - !Sub "arn:aws:s3:::${AMBAppsBuildBucketPrefix}*/*"
                  # - arn:aws:s3:::amb-devops-*
                  # - arn:aws:s3:::amb-devops-*/*
              - Effect: Allow
                Action:
                  - ecr:CreateRepository
                  - ecr:PutImageScanningConfiguration
                  - ecr:DeleteRepository
                  - ecr:SetRepositoryPolicy
                  - ecr:DeleteRepositoryPolicy
                  - ecr:TagResource
                  - ecr:UntagResource
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                Resource: !Sub arn:aws:ecr:${AMBAppsRegion}:${AWS::AccountId}:repository/*
              - Effect: Allow
                Action:
                  - ecs:RegisterTaskDefinition
                  - ecs:DeregisterTaskDefinition
                  - ecs:Update*
                  - ecs:Delete*
                  - ecs:Create*
                Resource: !Sub arn:aws:ecs:${AMBAppsRegion}:${AWS::AccountId}:cluster/${AMBAppsECSClusterName}*
              - Effect: Allow
                Action:
                  - ecs:Describe*
                  - ecs:List*
                  - ecs:DeregisterTaskDefinition
                Resource: "*"
              - Effect: Allow
                Action:
                  - ecs:Create*
                  - ecs:DescribeServices
                  - ecs:DescribeTaskDefinition
                  - ecs:DescribeTasks
                  - ecs:ListTasks
                  - ecs:RegisterTaskDefinition
                  - ecs:UpdateService
                Resource: "*"
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - cognito-idp:CreateUserPool
                  - cognito-idp:AddCustomAttributes
                  - cognito-idp:CreateUserPoolClient
                  - cognito-idp:CreateUserPoolDomain
                  - cognito-idp:DescribeUserPool
                  - cognito-idp:DescribeUserPoolClient
                  - cognito-idp:ListUserPoolClients
                  - cognito-idp:ListUserPools
                  - cognito-idp:UpdateUserPool
                  - cognito-idp:UpdateUserPoolClient
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - apigateway:POST
                  - apigateway:DELETE
                  - apigateway:GET
                  - apigateway:PATCH
                  - apigateway:PUT
                Resource: "*"
              - Resource: "*"
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:Delete*
              - Resource: !Sub "arn:aws:dynamodb:${AMBAppsRegion}:${AWS::AccountId}:table/${SyncDynamoDBNamePrefix}*"
                Effect: Allow
                Action:
                  - dynamodb:Create*
                  - dynamodb:Describe*
                  - dynamodb:DeleteTable
                  - dynamodb:List*
                  - dynamodb:TagResource
                  - dynamodb:UntagResource

              - Effect: Allow
                Action:
                  - sqs:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - sns:*
                Resource: "*"
  AMBAppsCloudWatchEventRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Ref AMBAppsCloudWatchEventRoleName
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: "sts:AssumeRole"
      Path: /
      PermissionsBoundary:
        Fn::If:
          - BoundaryPolicyARNExists
          - !Ref BoundaryPolicyARN
          - !Ref "AWS::NoValue"
  AMBAppsSyncTaskExecRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref AMBAppsSyncTaskExecRoleName
      Path: /
      PermissionsBoundary:
        Fn::If:
          - BoundaryPolicyARNExists
          - !Ref BoundaryPolicyARN
          - !Ref "AWS::NoValue"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: !Sub "${PoliciesPrefix}-VPCAccessInstantiationRole"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: VisualEditor0
                Effect: Allow
                Action:
                  - ec2:DescribeSubnets
                  - ec2:DescribeSecurityGroups
                Resource: "*"
        - PolicyName: !Sub "${PoliciesPrefix}-ChannelS3ReadWriteAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - s3:GetObject
                Effect: Allow
                Resource: arn:aws:s3:::${ChannelS3BucketPrefix}*/*
  AMBAppsSyncTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref AMBAppsSyncTaskRoleName
      Path: /
      PermissionsBoundary:
        Fn::If:
          - BoundaryPolicyARNExists
          - !Ref BoundaryPolicyARN
          - !Ref "AWS::NoValue"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
      Policies:
        - PolicyName: !Sub "${PoliciesPrefix}-DynamoDBFullAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${AMBSyncDynamoTableName}"
                Effect: Allow
                Action: dynamodb:*
        - PolicyName: !Sub "${PoliciesPrefix}-SecretsManagerReadAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: VisualEditor0
                Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                  - secretsmanager:ListSecretVersionIds
                Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/amb/*"
        - PolicyName: !Sub "${PoliciesPrefix}-ManagedBlockchainManager"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: VisualEditor0
                Effect: Allow
                Action:
                  - managedblockchain:GetNetwork
                  - managedblockchain:ListMembers
                  - managedblockchain:ListNetworks
                  - managedblockchain:GetNode
                  - managedblockchain:GetMember
                  - managedblockchain:ListNodes
                Resource: "*"
        - PolicyName: !Sub "${PoliciesPrefix}-ParameterStoreReadWriteAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: VisualEditor0
                Effect: Allow
                Action:
                  - ssm:GetParameterHistory
                  - ssm:GetParametersByPath
                  - ssm:GetParameters
                  - ssm:GetParameter
                Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/amb*"
              - Sid: VisualEditor1
                Effect: Allow
                Action: ssm:DescribeParameters
                Resource: "*"
        - PolicyName: !Sub "${PoliciesPrefix}-sS3ReadAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - s3:GetObject
                Effect: Allow
                Resource: arn:aws:s3:::*/*
Outputs:
  AMBAppsSAMRoleARN:
    Description: "ARN of the IAM role for Apps SAM application"
    Value: !GetAtt AMBAppsSAMRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-AMBAppsSAMRoleARN"
  AMBAppsCloudWatchEventRoleARN:
    Description: "ARN of an IAM role for AMB Apps CloudWatchEvent"
    Value: !GetAtt AMBAppsCloudWatchEventRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-AMBAppsCloudWatchEventRoleARN"
  AMBAppsCodeBuildRoleARN:
    Description: "ARN of an IAM role for AMB Apps CodeBuild"
    Value: !GetAtt AMBAppsCodeBuildRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-AMBAppsCodeBuildRoleARN"
  AMBAppsSyncTaskRoleARN:
    Description: "ARN of an IAM role for AMB Apps Synchronizer ECS Task"
    Value: !GetAtt AMBAppsSyncTaskRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-AMBAppsSyncTaskRoleARN"
  AMBAppsSyncTaskExecRoleARN:
    Description: "ARN of an IAM role for AMB Apps Synchronizer ECS Task Execution Role"
    Value: !GetAtt AMBAppsSyncTaskExecRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-AMBAppsSyncTaskExecRoleARN"
